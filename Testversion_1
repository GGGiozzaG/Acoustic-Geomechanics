# -*- coding: utf-8 -*-
"""
Differential Anisotropy Maps - Two layers case

- This script compare variations in barrier prediction between two anisotropic layers
- Each layer has constant thickness. We define, for each layer:
    SD (m)
    C33 (GPa)
    C44 (GPa)
    Ks (GPa)
- We define for both layers:
    SVG (MPa/m)
    PPSVGratio (-)
- We use the following variable definitions (only for top layer):
    Sh(psi)
    SH(psi)
- We use the following variable definitions (for each layer):
    Eps(-)
    Delta(-)
    Gamma(-)
    DEps(-)
    DDelta(-)
    DGamma(-)
- We calculate the tectonic strains using the parameters from the top layer
- We calculate Sh and SH columns
- We map stress polygons. Color code within stress polygons represent stress
variations due to differential anisotropy within layers.
- We plot stresses, stress gradients and stress gradients semblance
"""

    
#%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

from ipywidgets import interact
from ipywidgets import SelectionSlider
SV=np.linspace(0,1,40)
PP=np.linspace(0,1,40)
C33=np.linspace(0,1,40)
C44=np.linspace(0,1,40)
C11=np.linspace(0,1,40)
C66=np.linspace(0,1,40)
C13=np.linspace(0,1,40)
C11_D=np.linspace(0,1,40)
C66_D=np.linspace(0,1,40)
C13_D=np.linspace(0,1,40)
Ks=np.linspace(0,1,40)
Eps=np.linspace(0,1,40)
Delta=np.linspace(0,1,40)
Gamma=np.linspace(0,1,40)
Eta=np.linspace(0,1,40)
Eta_D=np.linspace(0,1,40)
DEps=np.linspace(0,1,40)
DDelta=np.linspace(0,1,40)
DGamma=np.linspace(0,1,40)
Bioth=np.linspace(0,1,40)
Biotv=np.linspace(0,1,40)
Bioth_D=np.linspace(0,1,40)
Biotv_D=np.linspace(0,1,40)
Sh=np.linspace(0,1,40)
SH=np.linspace(0,1,40)
Sh_D=np.linspace(0,1,40)
SH_D=np.linspace(0,1,40)
DiffSV=np.linspace(0,1,40)
DiffPP=np.linspace(0,1,40)
DiffSmin=np.linspace(0,1,40)
DiffSmax=np.linspace(0,1,40)

C33_top=1000000000
C44_top=500000000
C33_bot=1000000000
C44_bot=500000000
Ks_top=100000000
Ks_bot=100000000
#Interactive parameters are: Epsilon, Delta, Gamma (Top and Bottom) and Shmin and difference to Shmax
def mkSlider(minX,maxX,step):
    values=[i*step for i in range(int(minX),int((maxX-minX)/step))]
    nuSlider = SelectionSlider(options=[("%g"%i,i) for i in values])
    return nuSlider
@interact(Eps_top=mkSlider(0,0.5,0.02),
          Eps_bot=mkSlider(0,0.5,0.02),
          Delta_top=mkSlider(0,0.5,0.02),
          Delta_bot=mkSlider(0,0.5,0.02),
          Gamma_top=mkSlider(0,0.5,0.02),
          Gamma_bot=mkSlider(0,0.5,0.02),
          DEps_top=mkSlider(0,0.5,0.02),
          DEps_bot=mkSlider(0,0.5,0.02),
          DDelta_top=mkSlider(0,0.5,0.02),
          DDelta_bot=mkSlider(0,0.5,0.02),
          DGamma_top=mkSlider(0,0.5,0.02),
          DGamma_bot=mkSlider(0,0.5,0.02),
          Sh_cal=mkSlider(0,1.5,0.02),
          dSh_cal=mkSlider(0,1.5,0.02)) # Widget variables 

def Stresses(Eps_top=0,Eps_bot=0,Delta_top=0,Delta_bot=0,Gamma_top=0,Gamma_bot=0,DEps_top=0,DEps_bot=0,DDelta_top=0,DDelta_bot=0,DGamma_top=0,DGamma_bot=0,Sh_cal=1,dSh_cal=0):  
    SD=2000                             #Depth in m
    Depth=np.linspace(SD,SD+20,40)
    index=0      #Depth column in m
    for d in Depth:
        SV[index]=2*d
        PP[index]=0.8*SV[index]
        if (index<40):
            C33[index]=C33_top
            C44[index]=C44_top
            Ks[index]=Ks_top
            Eps[index]=Eps_top
            Delta[index]=Delta_top
            Gamma[index]=Gamma_top
            DEps[index]=DEps_top
            DDelta[index]=DDelta_top
            DGamma[index]=DGamma_top
        elif (index<41):
            C33[index]=(C33_top+C33_bot)/2
            C44[index]=(C44_top+C44_bot)/2
            Ks[index]=(Ks_top+Ks_bot)/2
            Eps[index]=(Eps_top+Eps_bot)/2
            Delta[index]=(Delta_top+Delta_bot)/2
            Gamma[index]=(Gamma_top+Gamma_bot)/2
            DEps[index]=(DEps_top+DEps_bot)/2
            DDelta[index]=(DDelta_top+DDelta_bot)/2
            DGamma[index]=(DGamma_top+DGamma_bot)/2
        else:
            C33[index]=C33_bot
            C44[index]=C44_bot
            Ks[index]=Ks_bot
            Eps[index]=Eps_bot
            Delta[index]=Delta_bot
            Gamma[index]=Gamma_bot    
            DEps[index]=DEps_bot
            DDelta[index]=DDelta_bot
            DGamma[index]=DGamma_bot
            Eta[index]=(Eps[index]-Delta[index])/(1+2*Delta[index])
            C11[index]=C33[index]*(1+2*Eps[index])
            C66[index]=C44[index]*(1+2*Gamma[index])
            C13[index]=-C44[index]+np.sqrt((C33[index]-C44[index])**2+2*Delta[index]*(C33[index]**2-C33[index]*C44[index]))
            Eta_D[index]=((Eps[index]+DEps[index])-(Delta[index]+DDelta[index]))/(1+2*(Delta[index]+DDelta[index]))
            C11_D[index]=C33[index]*(1+2*(Eps[index]+DEps[index]))
            C66_D[index]=C44[index]*(1+2*(Gamma[index]+DGamma[index]))
            C13_D[index]=-C44[index]+np.sqrt((C33[index]-C44[index])**2+2*(Delta[index]+DDelta[index])*(C33[index]**2-C33[index]*C44[index]))
            Bioth[index]=1-(2*C11[index]-2*C66[index]+C13[index])/(3*Ks[index])
            Biotv[index]=1-(2*C13[index]+C33[index])/(3*Ks[index])
            Bioth_D[index]=1-(2*C11_D[index]-2*C66_D[index]+C13_D[index])/(3*Ks[index])
            Biotv_D[index]=1-(2*C13_D[index]+C33[index])/(3*Ks[index])

    SH_cal=(Sh_cal+dSh_cal)*SV[0]
    Sh_cal=Sh_cal*SV[0]
    K_SigmaV=C13[0]/C33[0]*SD
    K_S=(C33[0]-C13[0]**2/C33[0])
    K_Pp=PP[0]*(1-C13[0]/C33[0]+2/(3*Ks[0])*(-C33[0]+C44[0]+C13[0]**2/C33[0]))
    TSMax=(Sh_cal-K_SigmaV-K_Pp+K_S/(2*C44[0])*(SH_cal-Sh_cal))/(2*(K_S-C44[0]))
    TSMin=(Sh_cal-K_SigmaV-K_Pp-TSMax*(K_S-2*C44[0]))/K_S
    K_SigmaV_D=C13_D[0]/C33[0]*SD
    K_S_D=(C33[0]-C13_D[0]**2/C33[0])
    K_Pp_D=PP[0]*(1-C13_D[0]/C33[0]+2/(3*Ks[0])*(-C33[0]+C44[0]+C13_D[0]**2/C33[0]))
    TSMax_D=(Sh_cal-K_SigmaV_D-K_Pp_D+K_S_D/(2*C44[0])*(SH_cal-Sh_cal))/(2*(K_S_D-C44[0]))
    TSMin_D=(Sh_cal-K_SigmaV_D-K_Pp_D-TSMax_D*(K_S_D-2*C44[0]))/K_S_D

    index=0

    for d in Depth:
        Sh[index]=(C13[index]/C33[index])*(SV[index]-Biotv[index]*PP[index])-(C13[index]**2/C33[index])*(TSMin+TSMax)+C11[index]*(TSMin+TSMax)-2*C66[index]*(TSMax)+Bioth[index]*PP[index]
        SH[index]=(C13[index]/C33[index])*(SV[index]-Biotv[index]*PP[index])-(C13[index]**2/C33[index])*(TSMin+TSMax)+C11[index]*(TSMin+TSMax)-2*C66[index]*(TSMin)+Bioth[index]*PP[index]
        Sh_D[index]=(C13_D[index]/C33[index])*(SV[index]-Biotv_D[index]*PP[index])-(C13_D[index]**2/C33[index])*(TSMin+TSMax)+C11_D[index]*(TSMin_D+TSMax_D)-2*C66_D[index]*(TSMax_D)+Bioth_D[index]*PP[index]
        SH_D[index]=(C13_D[index]/C33[index])*(SV[index]-Biotv_D[index]*PP[index])-(C13_D[index]**2/C33[index])*(TSMin+TSMax)+C11_D[index]*(TSMin_D+TSMax_D)-2*C66_D[index]*(TSMin_D)+Bioth_D[index]*PP[index]
        DiffSV[index]=-(C13[index]-C13_D[index])/C33[index]*SV[index]
        DiffPP[index]=PP[index]*((C13[index]-C13_D[index])/C33[index]+2/3*1/Ks[index]*(-C13[index]+C13_D[index])/C33[index]*(C13[index]+C13_D[index]))+4*PP[index]/(3*Ks[index])*(DGamma[index]*C44[index]-DEps[index]*C33[index])
        #DiffSmin[index]=-(C13_D[index]**2/C33[index])*(TSMin+TSMax)+C11_D[index]*(TSMin_D+TSMax_D)-2*C66_D[index]*(TSMax_D)+(C13[index]**2/C33[index])*(TSMin+TSMax)(TSMin+TSMax)-C11[index]*(TSMin+TSMax)+2*C66[index]*(TSMax)
        #DiffSmax[index]=-(C13_D[index]**2/C33[index])*(TSMin+TSMax)+C11_D[index]*(TSMin_D+TSMax_D)-2*C66_D[index]*(TSMin_D)+(C13[index]**2/C33[index])*(TSMin+TSMax)(TSMin+TSMax)-C11[index]*(TSMin+TSMax)+2*C66[index]*(TSMin)
    
    
